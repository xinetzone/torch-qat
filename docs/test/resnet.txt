
`````{panels}
:container: +full-width container-fluid
:column: col-lg-6 px-2 py-2
:header: w3-pale-red w3-round-xxlarge w3-wide
:body: w3-text-blue
:footer: w3-pale-blue w3-round-large w3-opacity

浮点模块
^^^
ResNet 的 `BasicBlock` 中需要被改造的部分：

1. `24-26`、`28-29` 与 `32` 需要被 {func}`~torchvision.models.quantization.utils._fuse_modules` 函数融合；
2. `34-35` 被替换为 {class}`~torch.nn.quantized.FloatFunctional` 的 {func}`add_relu` 函数。

```{eval-rst}
.. code-block:: python
    :linenos:
    :emphasize-lines: 24-26,28-29,32,34-35

    from torch import nn


    class BasicBlock(nn.Module):
        expansion: int = 1

        def __init__(
            self,
            inplanes: int,
            planes: int,
            stride: int = 1,
            downsample: Optional[nn.Module] = None,
            groups: int = 1,
            base_width: int = 64,
            dilation: int = 1,
            norm_layer: Optional[Callable[..., nn.Module]] = None,
            ) -> None:
            super().__init__()
            ... # 此处省略

        def forward(self, x: Tensor) -> Tensor:
            identity = x

            out = self.conv1(x)
            out = self.bn1(out)
            out = self.relu(out)

            out = self.conv2(out)
            out = self.bn2(out)

            if self.downsample is not None:
                identity = self.downsample(x)

            out += identity
            out = self.relu(out)
            return out
```
+++
`torchvision.models.resnet` 中的 {class}`~torchvision.models.resnet.BasicBlock`
---

可量化模块
^^^
改造的部分：

1. `7` 和 `22` 实现算子替换工作；
2. `12-14`、`16-17`、`20`、`26-27`、`29-30` 实现算子融合工作。

```{eval-rst}
.. code-block:: python
    :linenos:
    :emphasize-lines: 7,12-14,16-17,20,22,26-27,29-30

    from torchvision.models.resnet import BasicBlock


    class QuantizableBasicBlock(BasicBlock):
        def __init__(self, *args: Any, **kwargs: Any) -> None:
            super().__init__(*args, **kwargs)
            self.add_relu = torch.nn.quantized.FloatFunctional()

        def forward(self, x: Tensor) -> Tensor:
            identity = x

            out = self.conv1(x)
            out = self.bn1(out)
            out = self.relu(out)

            out = self.conv2(out)
            out = self.bn2(out)

            if self.downsample is not None:
                identity = self.downsample(x)

            out = self.add_relu.add_relu(out, identity)
            return out
        
        def fuse_model(self, is_qat: Optional[bool] = None) -> None:
            _fuse_modules(self, [["conv1", "bn1", "relu"],
                                ["conv2", "bn2"]], is_qat, inplace=True)
            if self.downsample:
                _fuse_modules(self.downsample,
                            ["0", "1"], is_qat, inplace=True)
````
+++
`torchvision.models.quantization.resnet` 中的 {class}`~torchvision.models.quantization.resnet.QuantizableBasicBlock`
`````
